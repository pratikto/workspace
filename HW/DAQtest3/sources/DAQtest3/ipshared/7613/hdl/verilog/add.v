// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="add,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=0.000000,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=105,HLS_SYN_LUT=198,HLS_VERSION=2018_3}" *)

module add (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        A_V_TDATA,
        A_V_TVALID,
        A_V_TREADY,
        B_V_TDATA,
        B_V_TVALID,
        B_V_TREADY,
        A_ready,
        B_ready,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP
);

parameter    ap_ST_fsm_state1 = 1'd1;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] A_V_TDATA;
input   A_V_TVALID;
output   A_V_TREADY;
input  [63:0] B_V_TDATA;
input   B_V_TVALID;
output   B_V_TREADY;
input   A_ready;
input   B_ready;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;

reg ap_done;
reg ap_idle;
reg ap_ready;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire    A_V_0_vld_in;
wire    A_V_0_ack_out;
reg   [1:0] A_V_0_state;
wire    B_V_0_vld_in;
wire    B_V_0_ack_out;
reg   [1:0] B_V_0_state;
wire   [63:0] C_V;
reg   [0:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 A_V_0_state = 2'd0;
#0 B_V_0_state = 2'd0;
end

add_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
add_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .C_V(C_V)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        A_V_0_state <= 2'd0;
    end else begin
        if ((((2'd2 == A_V_0_state) & (1'b0 == A_V_0_vld_in)) | ((2'd3 == A_V_0_state) & (1'b0 == A_V_0_vld_in) & (1'b1 == A_V_0_ack_out)))) begin
            A_V_0_state <= 2'd2;
        end else if ((((2'd1 == A_V_0_state) & (1'b0 == A_V_0_ack_out)) | ((2'd3 == A_V_0_state) & (1'b0 == A_V_0_ack_out) & (1'b1 == A_V_0_vld_in)))) begin
            A_V_0_state <= 2'd1;
        end else if (((~((1'b0 == A_V_0_vld_in) & (1'b1 == A_V_0_ack_out)) & ~((1'b0 == A_V_0_ack_out) & (1'b1 == A_V_0_vld_in)) & (2'd3 == A_V_0_state)) | ((2'd1 == A_V_0_state) & (1'b1 == A_V_0_ack_out)) | ((2'd2 == A_V_0_state) & (1'b1 == A_V_0_vld_in)))) begin
            A_V_0_state <= 2'd3;
        end else begin
            A_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        B_V_0_state <= 2'd0;
    end else begin
        if ((((2'd2 == B_V_0_state) & (1'b0 == B_V_0_vld_in)) | ((2'd3 == B_V_0_state) & (1'b0 == B_V_0_vld_in) & (1'b1 == B_V_0_ack_out)))) begin
            B_V_0_state <= 2'd2;
        end else if ((((2'd1 == B_V_0_state) & (1'b0 == B_V_0_ack_out)) | ((2'd3 == B_V_0_state) & (1'b0 == B_V_0_ack_out) & (1'b1 == B_V_0_vld_in)))) begin
            B_V_0_state <= 2'd1;
        end else if (((~((1'b0 == B_V_0_vld_in) & (1'b1 == B_V_0_ack_out)) & ~((1'b0 == B_V_0_ack_out) & (1'b1 == B_V_0_vld_in)) & (2'd3 == B_V_0_state)) | ((2'd1 == B_V_0_state) & (1'b1 == B_V_0_ack_out)) | ((2'd2 == B_V_0_state) & (1'b1 == B_V_0_vld_in)))) begin
            B_V_0_state <= 2'd3;
        end else begin
            B_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_V_0_ack_out = 1'b0;

assign A_V_0_vld_in = A_V_TVALID;

assign A_V_TREADY = A_V_0_state[1'd1];

assign B_V_0_ack_out = 1'b0;

assign B_V_0_vld_in = B_V_TVALID;

assign B_V_TREADY = B_V_0_state[1'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

endmodule //add
